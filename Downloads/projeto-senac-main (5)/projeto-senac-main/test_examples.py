#!/usr/bin/env python3
"""
Exemplos de teste para o verificador de not√≠cias
"""

import requests
import json

# URL da API
API_URL = "http://localhost:8000/verify"

def test_fake_news_example():
    """Testa com um exemplo de not√≠cia suspeita"""
    fake_news = {
        "text": "URGENTE!!! BOMBA: M√çDIA N√ÉO MOSTRA A VERDADE QUE NINGU√âM CONTA! "
                "COMPARTILHE ANTES QUE APAGUEM!!! Descoberta revolucion√°ria que "
                "os poderosos querem esconder do povo brasileiro!!!"
    }
    
    print("üîç Testando not√≠cia suspeita...")
    print(f"Texto: {fake_news['text'][:100]}...")
    
    response = requests.post(API_URL, json=fake_news)
    result = response.json()
    
    print(f"‚úÖ Score de credibilidade: {result['credibility_score']:.2f}")
    print(f"‚úÖ √â possivelmente falsa: {result['is_likely_fake']}")
    print(f"‚úÖ Confian√ßa: {result['confidence']:.2f}")
    print(f"‚úÖ Padr√µes suspeitos encontrados: {result['analysis']['text']['suspicious_patterns_found']}")
    print("-" * 50)

def test_credible_news_example():
    """Testa com um exemplo de not√≠cia normal"""
    normal_news = {
        "text": "O Minist√©rio da Sa√∫de divulgou hoje novos dados sobre a campanha "
                "de vacina√ß√£o no pa√≠s. Segundo o relat√≥rio, foram aplicadas "
                "mais de 2 milh√µes de doses na √∫ltima semana. Os n√∫meros "
                "mostram um aumento gradual na cobertura vacinal."
    }
    
    print("üîç Testando not√≠cia normal...")
    print(f"Texto: {normal_news['text'][:100]}...")
    
    response = requests.post(API_URL, json=normal_news)
    result = response.json()
    
    print(f"‚úÖ Score de credibilidade: {result['credibility_score']:.2f}")
    print(f"‚úÖ √â possivelmente falsa: {result['is_likely_fake']}")
    print(f"‚úÖ Confian√ßa: {result['confidence']:.2f}")
    print(f"‚úÖ Padr√µes suspeitos encontrados: {result['analysis']['text']['suspicious_patterns_found']}")
    print("-" * 50)

def test_url_analysis():
    """Testa an√°lise de URL de fonte confi√°vel"""
    url_test = {
        "url": "https://g1.globo.com"
    }
    
    print("üîç Testando an√°lise de URL (G1)...")
    print(f"URL: {url_test['url']}")
    
    response = requests.post(API_URL, json=url_test)
    result = response.json()
    
    print(f"‚úÖ Score de credibilidade: {result['credibility_score']:.2f}")
    print(f"‚úÖ √â possivelmente falsa: {result['is_likely_fake']}")
    print(f"‚úÖ Confian√ßa: {result['confidence']:.2f}")
    print(f"‚úÖ Fonte confi√°vel: {result['analysis']['url']['is_credible_source']}")
    print(f"‚úÖ Dom√≠nio: {result['analysis']['url']['domain']}")
    print("-" * 50)

def main():
    print("üöÄ Testando o Verificador de Not√≠cias")
    print("=" * 50)
    
    try:
        test_fake_news_example()
        test_credible_news_example()
        test_url_analysis()
        
        print("‚úÖ Todos os testes conclu√≠dos!")
        print("\nüí° Dicas:")
        print("- Acesse http://localhost:8000/demo para testar na interface web")
        print("- Use http://localhost:8000/docs para ver a documenta√ß√£o da API")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor.")
        print("Certifique-se de que o servidor est√° rodando em http://localhost:8000")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

if __name__ == "__main__":
    main()
